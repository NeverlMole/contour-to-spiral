from typing import List

import numpy as np
import os

input_file_name = "test-0.txt.spiral"
output_file_name = "test_gcode.gcode"
# for slicing
vertices_file_name = "text_layer_output"
shape_file_name = "test_layer"
min_width = 0.3
max_width = 1.0
# define global variables
multiplier = 1
layer_height = 0.3
speed_modifier = 3
print_height = 10

# printer specific header and footer, made for jubilee
HEADER_LINES = [
    "; generated by custom slicing software",
    "; author: danli luo, qiwen cui, chenzhi zhu",

    "M107",
    "M190 S20 ; set bed temperature and wait for it to be reached",
    "G10 S20 ; set temperature",
    "G91 ; relative moves",
    "G1 Z1 F900 ; raise tool 1mm",
    "G90 ; absolute moves",
    "T-1 ; Make sure nothing is parked on the carriage",
    "G0 X150 Y150 F10000; Move to the center of the print area",
    "M558 F500  ; Set the probing speed",
    "G30 ; Do a single probe",
    "M558 F50 ; Set a slower probing speed",
    "G30 ; Do a second probe",
    "T0",
    "G10 S20 ; set temperature",
    "M116 ; wait for temperature to be reached",
    "G21 ; set units to millimeters",
    "G90 ; use absolute coordinates",
    "M83 ; use relative distances for extrusion"
    
]

FOOTER_LINES = [
    ";END gcode for filament",
    "T-1         ; desect current tool",
#     "G0 Z305  ; move bed all the way to the bottom",
    "G91 ; relative moves",
    "G1 Z10 F900 ; move 10 mm away from the print",
    "M104 S0 T0; turn off extruder 0",
    "M104 S0 T1; turn off extruder 1",
    "M140 S0 ; turn off bed",
    "G0 X0 Y0 F30000; return home",
    "M84 S600; disable motors after ten mins of inactivity",
]

def load_contours(input_file_name: str): 
    file = open(input_file_name, 'r')
    lines = file.readlines()
    file.close()

    coords_all = np.array([ str(line) for line in lines ])
    coords = []
    for item in coords_all:
#         if not item[0].isalpha():
        coord = item.split(" ")
        if len(coord) >= 3:
            coord_line = [float(i) for i in coord]
            coord_xyzr = coord_line[:2]
            coord_xyzr.append(layer_height)
            coord_xyzr.append(coord_line[2])
            coords.append(coord_xyzr)
    return coords


def dist(i, j):
    # returns the euclidean distance between two points (np.array)
    return np.linalg.norm(i - j)

def move_to_position(target) -> str: 
    return f"G0 X{target[0]:.3f} Y{target[1]:.3f} Z{target[2]:.3f} F1800"

def extrude_segment(coord_f, coord_i) -> str:
    # The F values stand for feed rate, but in essence, mean the speed at which the extruder is traveling. 
    # F values are in terms of mm/min, so just divide by 60 to get mm/s (Ex: F60 = 1 mm/s).
    # F30 is a sweet spot for spirulina
    # x = coord in coords[0]
    # y = coord in coords[1]
    # Z = coord in coords[2]
    distance = dist(np.array([coord_f[0], coord_f[1]]), np.array([coord_i[0], coord_i[1]]))
    # extruded amount = dist * r * layer height
    E = distance * coord_f[3] * layer_height * multiplier
    # F inversely scales with r, but it does not scale with extruded amount
    F = speed_modifier / coord_f[3]
    Z = layer_height
    return f"G1 X{coord_f[0]:.3f} Y{coord_f[1]:.3f} Z{coord_f[2]:.3f} E{E:.7f} F{F:.3f}"
    
def write_gcode_lines(file, lines: List[str]):
  file.writelines([ line + " ;\n" for line in lines])

def convert_to_gcode(output_file_name: str, coords): 
    lines = []
    lines.extend(HEADER_LINES) 
    lines.append(move_to_position(coords[0]))
    for i in range(1, len(coords)):
        lines.append(extrude_segment(coords[i], coords[i-1]))
    for j in range(1, len(coords), -1):
        lines.append(extrude_segment(coords[i], coords[i-1]))
    lines.extend(FOOTER_LINES)

    with open(output_file_name, 'w') as file:
        write_gcode_lines(file, lines)
        print(f"Successfully wrote GCode to {output_file_name} [{len(lines)} lines]")


def load_contours_layers(vertices_file_name: str): 
    file = open(vertices_file_name, 'r')
    lines = file.readlines()
    file.close()

    coords_all = np.array([ str(line) for line in lines ])
    coords = []
    for item in coords_all:
        coord = item.replace('{','').replace('}','').split(",")
        coord_line = [float(i) for i in coord]
        coord_xyz = coord_line[:2]
        coords.append(coord_xyz)
        
    # sort coords into sublists
    layers = []
    layer = []
    while len(coords) > 0:
        if coords[0] not in layer:
            layer.append(coords[0])
            coords.pop(0)
        elif coords[0] in layer:
            coords.pop(0)
            layers.append(layer)
            layer = []
    return layers

def convert_to_shape(shape_file_name: str, layers): 
    layer_count = 0
    lines = []
    for layer in layers:
        lines.append(min_width)
        lines.append(max_width)
        lines.append(len(layer))
        for vertex in layer:
            x = str(vertex[0])
            y = str(vertex[1])
            xy = x + ' ' + y
            lines.append(xy)
        with open(shape_file_name + '_' + str(layer_count) + '.txt', 'w') as file:
            file.writelines([ str(line) + "\n" for line in lines])
            print(f"Successfully wrote shape file to {shape_file_name}")
            lines = []
        layer_count += 1


load_layer = load_contours_layers(vertices_file_name)
convert_to_shape(shape_file_name, load_layer)

loaded = load_contours(input_file_name)
convert_to_gcode(output_file_name, loaded)